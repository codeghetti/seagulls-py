window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "seagulls", "modulename": "seagulls", "qualname": "", "type": "module", "doc": "<p>The Seagulls Game Engine.</p>\n"}, {"fullname": "seagulls.assets", "modulename": "seagulls.assets", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "seagulls.assets.AssetManager", "modulename": "seagulls.assets", "qualname": "AssetManager", "type": "class", "doc": "<p>Provides basic functionality for loading assets from disk.</p>\n"}, {"fullname": "seagulls.assets.AssetManager.__init__", "modulename": "seagulls.assets", "qualname": "AssetManager.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "assets_path"], "funcdef": "def"}, {"fullname": "seagulls.assets.AssetManager.load_sprite", "modulename": "seagulls.assets", "qualname": "AssetManager.load_sprite", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "name"], "funcdef": "def"}, {"fullname": "seagulls.assets.AssetManager.load_png", "modulename": "seagulls.assets", "qualname": "AssetManager.load_png", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "name"], "funcdef": "def"}, {"fullname": "seagulls.cli", "modulename": "seagulls.cli", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "seagulls.cli.main", "modulename": "seagulls.cli", "qualname": "main", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.cli.cli_next", "modulename": "seagulls.cli", "qualname": "cli_next", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.debug", "modulename": "seagulls.debug", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "seagulls.debug.DebugHud", "modulename": "seagulls.debug", "qualname": "DebugHud", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.debug.DebugHud.__init__", "modulename": "seagulls.debug", "qualname": "DebugHud.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "game_clock"], "funcdef": "def"}, {"fullname": "seagulls.debug.DebugHud.tick", "modulename": "seagulls.debug", "qualname": "DebugHud.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.debug.DebugHud.render", "modulename": "seagulls.debug", "qualname": "DebugHud.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.engine", "modulename": "seagulls.engine", "qualname": "", "type": "module", "doc": "<p>Core Engine Components</p>\n"}, {"fullname": "seagulls.engine.flag_from_string", "modulename": "seagulls.engine", "qualname": "flag_from_string", "type": "function", "doc": "<p></p>\n", "parameters": ["value"], "funcdef": "def"}, {"fullname": "seagulls.engine.CollidableObject", "modulename": "seagulls.engine", "qualname": "CollidableObject", "type": "class", "doc": "<p>CollidableObject(layer: int, mask: int)</p>\n"}, {"fullname": "seagulls.engine.CollidableObject.__init__", "modulename": "seagulls.engine", "qualname": "CollidableObject.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "layer", "mask"], "funcdef": "def"}, {"fullname": "seagulls.engine.CollidableObject.filter_by_mask", "modulename": "seagulls.engine", "qualname": "CollidableObject.filter_by_mask", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "targets"], "funcdef": "def"}, {"fullname": "seagulls.engine.CollidableObject.is_in_mask", "modulename": "seagulls.engine", "qualname": "CollidableObject.is_in_mask", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "target"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameScene", "modulename": "seagulls.engine", "qualname": "IGameScene", "type": "class", "doc": "<p>This class is for X and Y.</p>\n"}, {"fullname": "seagulls.engine.IGameScene.start", "modulename": "seagulls.engine", "qualname": "IGameScene.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameScene.should_quit", "modulename": "seagulls.engine", "qualname": "IGameScene.should_quit", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameScene.tick", "modulename": "seagulls.engine", "qualname": "IGameScene.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IProvideGameScenes", "modulename": "seagulls.engine", "qualname": "IProvideGameScenes", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.engine.IProvideGameScenes.get_scene", "modulename": "seagulls.engine", "qualname": "IProvideGameScenes.get_scene", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IProvideGameSessions", "modulename": "seagulls.engine", "qualname": "IProvideGameSessions", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.engine.IProvideGameSessions.get_session", "modulename": "seagulls.engine", "qualname": "IProvideGameSessions.get_session", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "scene"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameSession", "modulename": "seagulls.engine", "qualname": "IGameSession", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.engine.IGameSession.start", "modulename": "seagulls.engine", "qualname": "IGameSession.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameSession.wait_for_completion", "modulename": "seagulls.engine", "qualname": "IGameSession.wait_for_completion", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.IGameSession.stop", "modulename": "seagulls.engine", "qualname": "IGameSession.stop", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.SurfaceRenderer", "modulename": "seagulls.engine", "qualname": "SurfaceRenderer", "type": "class", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.SurfaceRenderer.__init__", "modulename": "seagulls.engine", "qualname": "SurfaceRenderer.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.engine.SurfaceRenderer.start", "modulename": "seagulls.engine", "qualname": "SurfaceRenderer.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.SurfaceRenderer.render", "modulename": "seagulls.engine", "qualname": "SurfaceRenderer.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameClock", "modulename": "seagulls.engine", "qualname": "GameClock", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.engine.GameClock.__init__", "modulename": "seagulls.engine", "qualname": "GameClock.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameClock.tick", "modulename": "seagulls.engine", "qualname": "GameClock.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameClock.render", "modulename": "seagulls.engine", "qualname": "GameClock.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameClock.get_time", "modulename": "seagulls.engine", "qualname": "GameClock.get_time", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameClock.get_fps", "modulename": "seagulls.engine", "qualname": "GameClock.get_fps", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls", "modulename": "seagulls.engine", "qualname": "GameControls", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.engine.GameControls.__init__", "modulename": "seagulls.engine", "qualname": "GameControls.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.tick", "modulename": "seagulls.engine", "qualname": "GameControls.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.should_quit", "modulename": "seagulls.engine", "qualname": "GameControls.should_quit", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.should_fire", "modulename": "seagulls.engine", "qualname": "GameControls.should_fire", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.is_left_moving", "modulename": "seagulls.engine", "qualname": "GameControls.is_left_moving", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.is_right_moving", "modulename": "seagulls.engine", "qualname": "GameControls.is_right_moving", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.should_toggle_debug_hud", "modulename": "seagulls.engine", "qualname": "GameControls.should_toggle_debug_hud", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.is_click_initialized", "modulename": "seagulls.engine", "qualname": "GameControls.is_click_initialized", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.is_mouse_down", "modulename": "seagulls.engine", "qualname": "GameControls.is_mouse_down", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameControls.render", "modulename": "seagulls.engine", "qualname": "GameControls.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameObject", "modulename": "seagulls.engine", "qualname": "GameObject", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.engine.GameObject.tick", "modulename": "seagulls.engine", "qualname": "GameObject.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameObject.render", "modulename": "seagulls.engine", "qualname": "GameObject.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameObjectsCollection", "modulename": "seagulls.engine", "qualname": "GameObjectsCollection", "type": "class", "doc": "<p>Data structure that allows you to keep track of objects in the scene.</p>\n"}, {"fullname": "seagulls.engine.GameObjectsCollection.__init__", "modulename": "seagulls.engine", "qualname": "GameObjectsCollection.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameObjectsCollection.add", "modulename": "seagulls.engine", "qualname": "GameObjectsCollection.add", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "game_object"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameObjectsCollection.apply", "modulename": "seagulls.engine", "qualname": "GameObjectsCollection.apply", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "func"], "funcdef": "def"}, {"fullname": "seagulls.engine.GameSettings", "modulename": "seagulls.engine", "qualname": "GameSettings", "type": "class", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.GameSettings.__init__", "modulename": "seagulls.engine", "qualname": "GameSettings.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.engine.GameSettings.get_setting", "modulename": "seagulls.engine", "qualname": "GameSettings.get_setting", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "name", "default"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect", "modulename": "seagulls.engine", "qualname": "Rect", "type": "class", "doc": "<p>Rect(left, top, width, height) -> Rect\nRect((left, top), (width, height)) -> Rect\nRect(object) -> Rect\npygame object for storing rectangular coordinates</p>\n"}, {"fullname": "seagulls.engine.Rect.__init__", "modulename": "seagulls.engine", "qualname": "Rect.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.normalize", "modulename": "seagulls.engine", "qualname": "Rect.normalize", "type": "function", "doc": "<p>normalize() -> None\ncorrect negative sizes</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.clip", "modulename": "seagulls.engine", "qualname": "Rect.clip", "type": "function", "doc": "<p>clip(Rect) -> Rect\ncrops a rectangle inside another</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.clipline", "modulename": "seagulls.engine", "qualname": "Rect.clipline", "type": "function", "doc": "<p>clipline(x1, y1, x2, y2) -> ((cx1, cy1), (cx2, cy2))\nclipline(x1, y1, x2, y2) -> ()\nclipline((x1, y1), (x2, y2)) -> ((cx1, cy1), (cx2, cy2))\nclipline((x1, y1), (x2, y2)) -> ()\nclipline((x1, y1, x2, y2)) -> ((cx1, cy1), (cx2, cy2))\nclipline((x1, y1, x2, y2)) -> ()\nclipline(((x1, y1), (x2, y2))) -> ((cx1, cy1), (cx2, cy2))\nclipline(((x1, y1), (x2, y2))) -> ()\ncrops a line inside a rectangle</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.clamp", "modulename": "seagulls.engine", "qualname": "Rect.clamp", "type": "function", "doc": "<p>clamp(Rect) -> Rect\nmoves the rectangle inside another</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.clamp_ip", "modulename": "seagulls.engine", "qualname": "Rect.clamp_ip", "type": "function", "doc": "<p>clamp_ip(Rect) -> None\nmoves the rectangle inside another, in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.copy", "modulename": "seagulls.engine", "qualname": "Rect.copy", "type": "function", "doc": "<p>copy() -> Rect\ncopy the rectangle</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.fit", "modulename": "seagulls.engine", "qualname": "Rect.fit", "type": "function", "doc": "<p>fit(Rect) -> Rect\nresize and move a rectangle with aspect ratio</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.move", "modulename": "seagulls.engine", "qualname": "Rect.move", "type": "function", "doc": "<p>move(x, y) -> Rect\nmoves the rectangle</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.update", "modulename": "seagulls.engine", "qualname": "Rect.update", "type": "function", "doc": "<p>update(left, top, width, height) -> None\nupdate((left, top), (width, height)) -> None\nupdate(object) -> None\nsets the position and size of the rectangle</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.inflate", "modulename": "seagulls.engine", "qualname": "Rect.inflate", "type": "function", "doc": "<p>inflate(x, y) -> Rect\ngrow or shrink the rectangle size</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.union", "modulename": "seagulls.engine", "qualname": "Rect.union", "type": "function", "doc": "<p>union(Rect) -> Rect\njoins two rectangles into one</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.unionall", "modulename": "seagulls.engine", "qualname": "Rect.unionall", "type": "function", "doc": "<p>unionall(Rect_sequence) -> Rect\nthe union of many rectangles</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.move_ip", "modulename": "seagulls.engine", "qualname": "Rect.move_ip", "type": "function", "doc": "<p>move_ip(x, y) -> None\nmoves the rectangle, in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.inflate_ip", "modulename": "seagulls.engine", "qualname": "Rect.inflate_ip", "type": "function", "doc": "<p>inflate_ip(x, y) -> None\ngrow or shrink the rectangle size, in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.union_ip", "modulename": "seagulls.engine", "qualname": "Rect.union_ip", "type": "function", "doc": "<p>union_ip(Rect) -> None\njoins two rectangles into one, in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.unionall_ip", "modulename": "seagulls.engine", "qualname": "Rect.unionall_ip", "type": "function", "doc": "<p>unionall_ip(Rect_sequence) -> None\nthe union of many rectangles, in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.collidepoint", "modulename": "seagulls.engine", "qualname": "Rect.collidepoint", "type": "function", "doc": "<p>collidepoint(x, y) -> bool\ncollidepoint((x,y)) -> bool\ntest if a point is inside a rectangle</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.colliderect", "modulename": "seagulls.engine", "qualname": "Rect.colliderect", "type": "function", "doc": "<p>colliderect(Rect) -> bool\ntest if two rectangles overlap</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.collidelist", "modulename": "seagulls.engine", "qualname": "Rect.collidelist", "type": "function", "doc": "<p>collidelist(list) -> index\ntest if one rectangle in a list intersects</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.collidelistall", "modulename": "seagulls.engine", "qualname": "Rect.collidelistall", "type": "function", "doc": "<p>collidelistall(list) -> indices\ntest if all rectangles in a list intersect</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.collidedict", "modulename": "seagulls.engine", "qualname": "Rect.collidedict", "type": "function", "doc": "<p>collidedict(dict) -> (key, value)\ncollidedict(dict) -> None\ncollidedict(dict, use_values=0) -> (key, value)\ncollidedict(dict, use_values=0) -> None\ntest if one rectangle in a dictionary intersects</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.collidedictall", "modulename": "seagulls.engine", "qualname": "Rect.collidedictall", "type": "function", "doc": "<p>collidedictall(dict) -> [(key, value), ...]\ncollidedictall(dict, use_values=0) -> [(key, value), ...]\ntest if all rectangles in a dictionary intersect</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.contains", "modulename": "seagulls.engine", "qualname": "Rect.contains", "type": "function", "doc": "<p>contains(Rect) -> bool\ntest if one rectangle is inside another</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Rect.x", "modulename": "seagulls.engine", "qualname": "Rect.x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.y", "modulename": "seagulls.engine", "qualname": "Rect.y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.w", "modulename": "seagulls.engine", "qualname": "Rect.w", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.h", "modulename": "seagulls.engine", "qualname": "Rect.h", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.width", "modulename": "seagulls.engine", "qualname": "Rect.width", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.height", "modulename": "seagulls.engine", "qualname": "Rect.height", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.top", "modulename": "seagulls.engine", "qualname": "Rect.top", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.left", "modulename": "seagulls.engine", "qualname": "Rect.left", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.bottom", "modulename": "seagulls.engine", "qualname": "Rect.bottom", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.right", "modulename": "seagulls.engine", "qualname": "Rect.right", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.centerx", "modulename": "seagulls.engine", "qualname": "Rect.centerx", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.centery", "modulename": "seagulls.engine", "qualname": "Rect.centery", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.topleft", "modulename": "seagulls.engine", "qualname": "Rect.topleft", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.topright", "modulename": "seagulls.engine", "qualname": "Rect.topright", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.bottomleft", "modulename": "seagulls.engine", "qualname": "Rect.bottomleft", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.bottomright", "modulename": "seagulls.engine", "qualname": "Rect.bottomright", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.midtop", "modulename": "seagulls.engine", "qualname": "Rect.midtop", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.midleft", "modulename": "seagulls.engine", "qualname": "Rect.midleft", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.midbottom", "modulename": "seagulls.engine", "qualname": "Rect.midbottom", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.midright", "modulename": "seagulls.engine", "qualname": "Rect.midright", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.size", "modulename": "seagulls.engine", "qualname": "Rect.size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Rect.center", "modulename": "seagulls.engine", "qualname": "Rect.center", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Surface", "modulename": "seagulls.engine", "qualname": "Surface", "type": "class", "doc": "<p>Surface((width, height), flags=0, depth=0, masks=None) -> Surface\nSurface((width, height), flags=0, Surface) -> Surface\npygame object for representing images</p>\n"}, {"fullname": "seagulls.engine.Surface.__init__", "modulename": "seagulls.engine", "qualname": "Surface.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_at", "modulename": "seagulls.engine", "qualname": "Surface.get_at", "type": "function", "doc": "<p>get_at((x, y)) -> Color\nget the color value at a single pixel</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_at", "modulename": "seagulls.engine", "qualname": "Surface.set_at", "type": "function", "doc": "<p>set_at((x, y), Color) -> None\nset the color value for a single pixel</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_at_mapped", "modulename": "seagulls.engine", "qualname": "Surface.get_at_mapped", "type": "function", "doc": "<p>get_at_mapped((x, y)) -> Color\nget the mapped color value at a single pixel</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.map_rgb", "modulename": "seagulls.engine", "qualname": "Surface.map_rgb", "type": "function", "doc": "<p>map_rgb(Color) -> mapped_int\nconvert a color into a mapped color value</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.unmap_rgb", "modulename": "seagulls.engine", "qualname": "Surface.unmap_rgb", "type": "function", "doc": "<p>unmap_rgb(mapped_int) -> Color\nconvert a mapped integer color value into a Color</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_palette", "modulename": "seagulls.engine", "qualname": "Surface.get_palette", "type": "function", "doc": "<p>get_palette() -> [RGB, RGB, RGB, ...]\nget the color index palette for an 8-bit Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_palette_at", "modulename": "seagulls.engine", "qualname": "Surface.get_palette_at", "type": "function", "doc": "<p>get_palette_at(index) -> RGB\nget the color for a single entry in a palette</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_palette", "modulename": "seagulls.engine", "qualname": "Surface.set_palette", "type": "function", "doc": "<p>set_palette([RGB, RGB, RGB, ...]) -> None\nset the color palette for an 8-bit Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_palette_at", "modulename": "seagulls.engine", "qualname": "Surface.set_palette_at", "type": "function", "doc": "<p>set_palette_at(index, RGB) -> None\nset the color for a single index in an 8-bit Surface palette</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.lock", "modulename": "seagulls.engine", "qualname": "Surface.lock", "type": "function", "doc": "<p>lock() -> None\nlock the Surface memory for pixel access</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.unlock", "modulename": "seagulls.engine", "qualname": "Surface.unlock", "type": "function", "doc": "<p>unlock() -> None\nunlock the Surface memory from pixel access</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.mustlock", "modulename": "seagulls.engine", "qualname": "Surface.mustlock", "type": "function", "doc": "<p>mustlock() -> bool\ntest if the Surface requires locking</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_locked", "modulename": "seagulls.engine", "qualname": "Surface.get_locked", "type": "function", "doc": "<p>get_locked() -> bool\ntest if the Surface is current locked</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_locks", "modulename": "seagulls.engine", "qualname": "Surface.get_locks", "type": "function", "doc": "<p>get_locks() -> tuple\nGets the locks for the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_colorkey", "modulename": "seagulls.engine", "qualname": "Surface.set_colorkey", "type": "function", "doc": "<p>set_colorkey(Color, flags=0) -> None\nset_colorkey(None) -> None\nSet the transparent colorkey</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_colorkey", "modulename": "seagulls.engine", "qualname": "Surface.get_colorkey", "type": "function", "doc": "<p>get_colorkey() -> RGB or None\nGet the current transparent colorkey</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_alpha", "modulename": "seagulls.engine", "qualname": "Surface.set_alpha", "type": "function", "doc": "<p>set_alpha(value, flags=0) -> None\nset_alpha(None) -> None\nset the alpha value for the full Surface image</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_alpha", "modulename": "seagulls.engine", "qualname": "Surface.get_alpha", "type": "function", "doc": "<p>get_alpha() -> int_value\nget the current Surface transparency value</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_blendmode", "modulename": "seagulls.engine", "qualname": "Surface.get_blendmode", "type": "function", "doc": "<p>Return the surface's SDL 2 blend mode</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.copy", "modulename": "seagulls.engine", "qualname": "Surface.copy", "type": "function", "doc": "<p>copy() -> Surface\ncreate a new copy of a Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.convert", "modulename": "seagulls.engine", "qualname": "Surface.convert", "type": "function", "doc": "<p>convert(Surface=None) -> Surface\nconvert(depth, flags=0) -> Surface\nconvert(masks, flags=0) -> Surface\nchange the pixel format of an image</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.convert_alpha", "modulename": "seagulls.engine", "qualname": "Surface.convert_alpha", "type": "function", "doc": "<p>convert_alpha(Surface) -> Surface\nconvert_alpha() -> Surface\nchange the pixel format of an image including per pixel alphas</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_clip", "modulename": "seagulls.engine", "qualname": "Surface.set_clip", "type": "function", "doc": "<p>set_clip(rect) -> None\nset_clip(None) -> None\nset the current clipping area of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_clip", "modulename": "seagulls.engine", "qualname": "Surface.get_clip", "type": "function", "doc": "<p>get_clip() -> Rect\nget the current clipping area of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.fill", "modulename": "seagulls.engine", "qualname": "Surface.fill", "type": "function", "doc": "<p>fill(color, rect=None, special_flags=0) -> Rect\nfill Surface with a solid color</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.blit", "modulename": "seagulls.engine", "qualname": "Surface.blit", "type": "function", "doc": "<p>blit(source, dest, area=None, special_flags=0) -> Rect\ndraw one image onto another</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.blits", "modulename": "seagulls.engine", "qualname": "Surface.blits", "type": "function", "doc": "<p>blits(blit_sequence=((source, dest), ...), doreturn=1) -> [Rect, ...] or None\nblits(((source, dest, area), ...)) -> [Rect, ...]\nblits(((source, dest, area, special_flags), ...)) -> [Rect, ...]\ndraw many images onto another</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.scroll", "modulename": "seagulls.engine", "qualname": "Surface.scroll", "type": "function", "doc": "<p>scroll(dx=0, dy=0) -> None\nShift the surface image in place</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_flags", "modulename": "seagulls.engine", "qualname": "Surface.get_flags", "type": "function", "doc": "<p>get_flags() -> int\nget the additional flags used for the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_size", "modulename": "seagulls.engine", "qualname": "Surface.get_size", "type": "function", "doc": "<p>get_size() -> (width, height)\nget the dimensions of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_width", "modulename": "seagulls.engine", "qualname": "Surface.get_width", "type": "function", "doc": "<p>get_width() -> width\nget the width of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_height", "modulename": "seagulls.engine", "qualname": "Surface.get_height", "type": "function", "doc": "<p>get_height() -> height\nget the height of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_rect", "modulename": "seagulls.engine", "qualname": "Surface.get_rect", "type": "function", "doc": "<p>get_rect(**kwargs) -> Rect\nget the rectangular area of the Surface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_pitch", "modulename": "seagulls.engine", "qualname": "Surface.get_pitch", "type": "function", "doc": "<p>get_pitch() -> int\nget the number of bytes used per Surface row</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_bitsize", "modulename": "seagulls.engine", "qualname": "Surface.get_bitsize", "type": "function", "doc": "<p>get_bitsize() -> int\nget the bit depth of the Surface pixel format</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_bytesize", "modulename": "seagulls.engine", "qualname": "Surface.get_bytesize", "type": "function", "doc": "<p>get_bytesize() -> int\nget the bytes used per Surface pixel</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_masks", "modulename": "seagulls.engine", "qualname": "Surface.get_masks", "type": "function", "doc": "<p>get_masks() -> (R, G, B, A)\nthe bitmasks needed to convert between a color and a mapped integer</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_shifts", "modulename": "seagulls.engine", "qualname": "Surface.get_shifts", "type": "function", "doc": "<p>get_shifts() -> (R, G, B, A)\nthe bit shifts needed to convert between a color and a mapped integer</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_masks", "modulename": "seagulls.engine", "qualname": "Surface.set_masks", "type": "function", "doc": "<p>set_masks((r,g,b,a)) -> None\nset the bitmasks needed to convert between a color and a mapped integer</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.set_shifts", "modulename": "seagulls.engine", "qualname": "Surface.set_shifts", "type": "function", "doc": "<p>set_shifts((r,g,b,a)) -> None\nsets the bit shifts needed to convert between a color and a mapped integer</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_losses", "modulename": "seagulls.engine", "qualname": "Surface.get_losses", "type": "function", "doc": "<p>get_losses() -> (R, G, B, A)\nthe significant bits used to convert between a color and a mapped integer</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.subsurface", "modulename": "seagulls.engine", "qualname": "Surface.subsurface", "type": "function", "doc": "<p>subsurface(Rect) -> Surface\ncreate a new surface that references its parent</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_offset", "modulename": "seagulls.engine", "qualname": "Surface.get_offset", "type": "function", "doc": "<p>get_offset() -> (x, y)\nfind the position of a child subsurface inside a parent</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_abs_offset", "modulename": "seagulls.engine", "qualname": "Surface.get_abs_offset", "type": "function", "doc": "<p>get_abs_offset() -> (x, y)\nfind the absolute position of a child subsurface inside its top level parent</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_parent", "modulename": "seagulls.engine", "qualname": "Surface.get_parent", "type": "function", "doc": "<p>get_parent() -> Surface\nfind the parent of a subsurface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_abs_parent", "modulename": "seagulls.engine", "qualname": "Surface.get_abs_parent", "type": "function", "doc": "<p>get_abs_parent() -> Surface\nfind the top level parent of a subsurface</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_bounding_rect", "modulename": "seagulls.engine", "qualname": "Surface.get_bounding_rect", "type": "function", "doc": "<p>get_bounding_rect(min_alpha = 1) -> Rect\nfind the smallest rect containing data</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_view", "modulename": "seagulls.engine", "qualname": "Surface.get_view", "type": "function", "doc": "<p>get_view(<kind>='2') -> BufferProxy\nreturn a buffer view of the Surface's pixels.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Surface.get_buffer", "modulename": "seagulls.engine", "qualname": "Surface.get_buffer", "type": "function", "doc": "<p>get_buffer() -> BufferProxy\nacquires a buffer object for the pixels of the Surface.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color", "modulename": "seagulls.engine", "qualname": "Color", "type": "class", "doc": "<p>Color(r, g, b) -> Color\nColor(r, g, b, a=255) -> Color\nColor(color_value) -> Color\npygame object for color representations</p>\n"}, {"fullname": "seagulls.engine.Color.__init__", "modulename": "seagulls.engine", "qualname": "Color.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.normalize", "modulename": "seagulls.engine", "qualname": "Color.normalize", "type": "function", "doc": "<p>normalize() -> tuple\nReturns the normalized RGBA values of the Color.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.correct_gamma", "modulename": "seagulls.engine", "qualname": "Color.correct_gamma", "type": "function", "doc": "<p>correct_gamma (gamma) -> Color\nApplies a certain gamma value to the Color.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.set_length", "modulename": "seagulls.engine", "qualname": "Color.set_length", "type": "function", "doc": "<p>set_length(len) -> None\nSet the number of elements in the Color to 1,2,3, or 4.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.lerp", "modulename": "seagulls.engine", "qualname": "Color.lerp", "type": "function", "doc": "<p>lerp(Color, float) -> Color\nreturns a linear interpolation to the given Color.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.premul_alpha", "modulename": "seagulls.engine", "qualname": "Color.premul_alpha", "type": "function", "doc": "<p>premul_alpha() -> Color\nreturns a Color where the r,g,b components have been multiplied by the alpha.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.update", "modulename": "seagulls.engine", "qualname": "Color.update", "type": "function", "doc": "<p>update(r, g, b) -> None\nupdate(r, g, b, a=255) -> None\nupdate(color_value) -> None\nSets the elements of the color</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Color.r", "modulename": "seagulls.engine", "qualname": "Color.r", "type": "variable", "doc": "<p>r -> int\nGets or sets the red value of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.g", "modulename": "seagulls.engine", "qualname": "Color.g", "type": "variable", "doc": "<p>g -> int\nGets or sets the green value of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.b", "modulename": "seagulls.engine", "qualname": "Color.b", "type": "variable", "doc": "<p>b -> int\nGets or sets the blue value of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.a", "modulename": "seagulls.engine", "qualname": "Color.a", "type": "variable", "doc": "<p>a -> int\nGets or sets the alpha value of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.hsva", "modulename": "seagulls.engine", "qualname": "Color.hsva", "type": "variable", "doc": "<p>hsva -> tuple\nGets or sets the HSVA representation of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.hsla", "modulename": "seagulls.engine", "qualname": "Color.hsla", "type": "variable", "doc": "<p>hsla -> tuple\nGets or sets the HSLA representation of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.i1i2i3", "modulename": "seagulls.engine", "qualname": "Color.i1i2i3", "type": "variable", "doc": "<p>i1i2i3 -> tuple\nGets or sets the I1I2I3 representation of the Color.</p>\n"}, {"fullname": "seagulls.engine.Color.cmy", "modulename": "seagulls.engine", "qualname": "Color.cmy", "type": "variable", "doc": "<p>cmy -> tuple\nGets or sets the CMY representation of the Color.</p>\n"}, {"fullname": "seagulls.engine.PixelArray", "modulename": "seagulls.engine", "qualname": "PixelArray", "type": "class", "doc": "<p>PixelArray(Surface) -> PixelArray\npygame object for direct pixel access of surfaces</p>\n"}, {"fullname": "seagulls.engine.PixelArray.__init__", "modulename": "seagulls.engine", "qualname": "PixelArray.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.compare", "modulename": "seagulls.engine", "qualname": "PixelArray.compare", "type": "function", "doc": "<p>compare(array, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray\nCompares the PixelArray with another one.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.extract", "modulename": "seagulls.engine", "qualname": "PixelArray.extract", "type": "function", "doc": "<p>extract(color, distance=0, weights=(0.299, 0.587, 0.114)) -> PixelArray\nExtracts the passed color from the PixelArray.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.make_surface", "modulename": "seagulls.engine", "qualname": "PixelArray.make_surface", "type": "function", "doc": "<p>make_surface() -> Surface\nCreates a new Surface from the current PixelArray.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.close", "modulename": "seagulls.engine", "qualname": "PixelArray.close", "type": "function", "doc": "<p>transpose() -> PixelArray\nCloses the PixelArray, and releases Surface lock.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.replace", "modulename": "seagulls.engine", "qualname": "PixelArray.replace", "type": "function", "doc": "<p>replace(color, repcolor, distance=0, weights=(0.299, 0.587, 0.114)) -> None\nReplaces the passed color in the PixelArray with another one.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.transpose", "modulename": "seagulls.engine", "qualname": "PixelArray.transpose", "type": "function", "doc": "<p>transpose() -> PixelArray\nExchanges the x and y axis.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.PixelArray.surface", "modulename": "seagulls.engine", "qualname": "PixelArray.surface", "type": "variable", "doc": "<p>surface -> Surface\nGets the Surface the PixelArray uses.</p>\n"}, {"fullname": "seagulls.engine.PixelArray.itemsize", "modulename": "seagulls.engine", "qualname": "PixelArray.itemsize", "type": "variable", "doc": "<p>itemsize -> int\nReturns the byte size of a pixel array item</p>\n"}, {"fullname": "seagulls.engine.PixelArray.shape", "modulename": "seagulls.engine", "qualname": "PixelArray.shape", "type": "variable", "doc": "<p>shape -> tuple of int's\nReturns the array size.</p>\n"}, {"fullname": "seagulls.engine.PixelArray.strides", "modulename": "seagulls.engine", "qualname": "PixelArray.strides", "type": "variable", "doc": "<p>strides -> tuple of int's\nReturns byte offsets for each array dimension.</p>\n"}, {"fullname": "seagulls.engine.PixelArray.ndim", "modulename": "seagulls.engine", "qualname": "PixelArray.ndim", "type": "variable", "doc": "<p>ndim -> int\nReturns the number of dimensions.</p>\n"}, {"fullname": "seagulls.engine.Vector2", "modulename": "seagulls.engine", "qualname": "Vector2", "type": "class", "doc": "<p>Vector2() -> Vector2\nVector2(int) -> Vector2\nVector2(float) -> Vector2\nVector2(Vector2) -> Vector2\nVector2(x, y) -> Vector2\nVector2((x, y)) -> Vector2\na 2-Dimensional Vector</p>\n"}, {"fullname": "seagulls.engine.Vector2.__init__", "modulename": "seagulls.engine", "qualname": "Vector2.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.length", "modulename": "seagulls.engine", "qualname": "Vector2.length", "type": "function", "doc": "<p>length() -> float\nreturns the Euclidean length of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.length_squared", "modulename": "seagulls.engine", "qualname": "Vector2.length_squared", "type": "function", "doc": "<p>length_squared() -> float\nreturns the squared Euclidean length of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.magnitude", "modulename": "seagulls.engine", "qualname": "Vector2.magnitude", "type": "function", "doc": "<p>magnitude() -> float\nreturns the Euclidean magnitude of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.magnitude_squared", "modulename": "seagulls.engine", "qualname": "Vector2.magnitude_squared", "type": "function", "doc": "<p>magnitude_squared() -> float\nreturns the squared magnitude of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.rotate", "modulename": "seagulls.engine", "qualname": "Vector2.rotate", "type": "function", "doc": "<p>rotate(angle) -> Vector2\nrotates a vector by a given angle in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.rotate_ip", "modulename": "seagulls.engine", "qualname": "Vector2.rotate_ip", "type": "function", "doc": "<p>rotate_ip(angle) -> None\nrotates the vector by a given angle in degrees in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.rotate_rad", "modulename": "seagulls.engine", "qualname": "Vector2.rotate_rad", "type": "function", "doc": "<p>rotate_rad(angle) -> Vector2\nrotates a vector by a given angle in radians.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.rotate_ip_rad", "modulename": "seagulls.engine", "qualname": "Vector2.rotate_ip_rad", "type": "function", "doc": "<p>rotate_ip_rad(angle) -> None\nrotates the vector by a given angle in radians in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.slerp", "modulename": "seagulls.engine", "qualname": "Vector2.slerp", "type": "function", "doc": "<p>slerp(Vector2, float) -> Vector2\nreturns a spherical interpolation to the given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.lerp", "modulename": "seagulls.engine", "qualname": "Vector2.lerp", "type": "function", "doc": "<p>lerp(Vector2, float) -> Vector2\nreturns a linear interpolation to the given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.normalize", "modulename": "seagulls.engine", "qualname": "Vector2.normalize", "type": "function", "doc": "<p>normalize() -> Vector2\nreturns a vector with the same direction but length 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.normalize_ip", "modulename": "seagulls.engine", "qualname": "Vector2.normalize_ip", "type": "function", "doc": "<p>normalize_ip() -> None\nnormalizes the vector in place so that its length is 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.is_normalized", "modulename": "seagulls.engine", "qualname": "Vector2.is_normalized", "type": "function", "doc": "<p>is_normalized() -> Bool\ntests if the vector is normalized i.e. has length == 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.cross", "modulename": "seagulls.engine", "qualname": "Vector2.cross", "type": "function", "doc": "<p>cross(Vector2) -> Vector2\ncalculates the cross- or vector-product</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.dot", "modulename": "seagulls.engine", "qualname": "Vector2.dot", "type": "function", "doc": "<p>dot(Vector2) -> float\ncalculates the dot- or scalar-product with the other vector</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.angle_to", "modulename": "seagulls.engine", "qualname": "Vector2.angle_to", "type": "function", "doc": "<p>angle_to(Vector2) -> float\ncalculates the angle to a given vector in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.update", "modulename": "seagulls.engine", "qualname": "Vector2.update", "type": "function", "doc": "<p>update() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector2) -> None\nupdate(x, y) -> None\nupdate((x, y)) -> None\nSets the coordinates of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.scale_to_length", "modulename": "seagulls.engine", "qualname": "Vector2.scale_to_length", "type": "function", "doc": "<p>scale_to_length(float) -> None\nscales the vector to a given length.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.reflect", "modulename": "seagulls.engine", "qualname": "Vector2.reflect", "type": "function", "doc": "<p>reflect(Vector2) -> Vector2\nreturns a vector reflected of a given normal.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.reflect_ip", "modulename": "seagulls.engine", "qualname": "Vector2.reflect_ip", "type": "function", "doc": "<p>reflect_ip(Vector2) -> None\nreflect the vector of a given normal in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.distance_to", "modulename": "seagulls.engine", "qualname": "Vector2.distance_to", "type": "function", "doc": "<p>distance_to(Vector2) -> float\ncalculates the Euclidean distance to a given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.distance_squared_to", "modulename": "seagulls.engine", "qualname": "Vector2.distance_squared_to", "type": "function", "doc": "<p>distance_squared_to(Vector2) -> float\ncalculates the squared Euclidean distance to a given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.elementwise", "modulename": "seagulls.engine", "qualname": "Vector2.elementwise", "type": "function", "doc": "<p>elementwise() -> VectorElementwiseProxy\nThe next operation will be performed elementwise.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.as_polar", "modulename": "seagulls.engine", "qualname": "Vector2.as_polar", "type": "function", "doc": "<p>as_polar() -> (r, phi)\nreturns a tuple with radial distance and azimuthal angle.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.from_polar", "modulename": "seagulls.engine", "qualname": "Vector2.from_polar", "type": "function", "doc": "<p>from_polar((r, phi)) -> None\nSets x and y from a polar coordinates tuple.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.project", "modulename": "seagulls.engine", "qualname": "Vector2.project", "type": "function", "doc": "<p>project(Vector2) -> Vector2\nprojects a vector onto another.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector2.epsilon", "modulename": "seagulls.engine", "qualname": "Vector2.epsilon", "type": "variable", "doc": "<p>small value used in comparisons</p>\n"}, {"fullname": "seagulls.engine.Vector2.x", "modulename": "seagulls.engine", "qualname": "Vector2.x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Vector2.y", "modulename": "seagulls.engine", "qualname": "Vector2.y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Vector3", "modulename": "seagulls.engine", "qualname": "Vector3", "type": "class", "doc": "<p>Vector3() -> Vector3\nVector3(int) -> Vector3\nVector3(float) -> Vector3\nVector3(Vector3) -> Vector3\nVector3(x, y, z) -> Vector3\nVector3((x, y, z)) -> Vector3\na 3-Dimensional Vector</p>\n"}, {"fullname": "seagulls.engine.Vector3.__init__", "modulename": "seagulls.engine", "qualname": "Vector3.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.length", "modulename": "seagulls.engine", "qualname": "Vector3.length", "type": "function", "doc": "<p>length() -> float\nreturns the Euclidean length of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.length_squared", "modulename": "seagulls.engine", "qualname": "Vector3.length_squared", "type": "function", "doc": "<p>length_squared() -> float\nreturns the squared Euclidean length of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.magnitude", "modulename": "seagulls.engine", "qualname": "Vector3.magnitude", "type": "function", "doc": "<p>magnitude() -> float\nreturns the Euclidean magnitude of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.magnitude_squared", "modulename": "seagulls.engine", "qualname": "Vector3.magnitude_squared", "type": "function", "doc": "<p>magnitude_squared() -> float\nreturns the squared Euclidean magnitude of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate", "modulename": "seagulls.engine", "qualname": "Vector3.rotate", "type": "function", "doc": "<p>rotate(angle, Vector3) -> Vector3\nrotates a vector by a given angle in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_ip", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_ip", "type": "function", "doc": "<p>rotate_ip(angle, Vector3) -> None\nrotates the vector by a given angle in degrees in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_rad", "type": "function", "doc": "<p>rotate_rad(angle, Vector3) -> Vector3\nrotates a vector by a given angle in radians.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_ip_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_ip_rad", "type": "function", "doc": "<p>rotate_ip_rad(angle, Vector3) -> None\nrotates the vector by a given angle in radians in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_x", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_x", "type": "function", "doc": "<p>rotate_x(angle) -> Vector3\nrotates a vector around the x-axis by the angle in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_x_ip", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_x_ip", "type": "function", "doc": "<p>rotate_x_ip(angle) -> None\nrotates the vector around the x-axis by the angle in degrees in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_x_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_x_rad", "type": "function", "doc": "<p>rotate_x_rad(angle) -> Vector3\nrotates a vector around the x-axis by the angle in radians.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_x_ip_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_x_ip_rad", "type": "function", "doc": "<p>rotate_x_ip_rad(angle) -> None\nrotates the vector around the x-axis by the angle in radians in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_y", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_y", "type": "function", "doc": "<p>rotate_y(angle) -> Vector3\nrotates a vector around the y-axis by the angle in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_y_ip", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_y_ip", "type": "function", "doc": "<p>rotate_y_ip(angle) -> None\nrotates the vector around the y-axis by the angle in degrees in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_y_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_y_rad", "type": "function", "doc": "<p>rotate_y_rad(angle) -> Vector3\nrotates a vector around the y-axis by the angle in radians.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_y_ip_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_y_ip_rad", "type": "function", "doc": "<p>rotate_y_ip_rad(angle) -> None\nrotates the vector around the y-axis by the angle in radians in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_z", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_z", "type": "function", "doc": "<p>rotate_z(angle) -> Vector3\nrotates a vector around the z-axis by the angle in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_z_ip", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_z_ip", "type": "function", "doc": "<p>rotate_z_ip(angle) -> None\nrotates the vector around the z-axis by the angle in degrees in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_z_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_z_rad", "type": "function", "doc": "<p>rotate_z_rad(angle) -> Vector3\nrotates a vector around the z-axis by the angle in radians.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.rotate_z_ip_rad", "modulename": "seagulls.engine", "qualname": "Vector3.rotate_z_ip_rad", "type": "function", "doc": "<p>rotate_z_ip_rad(angle) -> None\nrotates the vector around the z-axis by the angle in radians in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.slerp", "modulename": "seagulls.engine", "qualname": "Vector3.slerp", "type": "function", "doc": "<p>slerp(Vector3, float) -> Vector3\nreturns a spherical interpolation to the given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.lerp", "modulename": "seagulls.engine", "qualname": "Vector3.lerp", "type": "function", "doc": "<p>lerp(Vector3, float) -> Vector3\nreturns a linear interpolation to the given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.normalize", "modulename": "seagulls.engine", "qualname": "Vector3.normalize", "type": "function", "doc": "<p>normalize() -> Vector3\nreturns a vector with the same direction but length 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.normalize_ip", "modulename": "seagulls.engine", "qualname": "Vector3.normalize_ip", "type": "function", "doc": "<p>normalize_ip() -> None\nnormalizes the vector in place so that its length is 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.is_normalized", "modulename": "seagulls.engine", "qualname": "Vector3.is_normalized", "type": "function", "doc": "<p>is_normalized() -> Bool\ntests if the vector is normalized i.e. has length == 1.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.cross", "modulename": "seagulls.engine", "qualname": "Vector3.cross", "type": "function", "doc": "<p>cross(Vector3) -> Vector3\ncalculates the cross- or vector-product</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.dot", "modulename": "seagulls.engine", "qualname": "Vector3.dot", "type": "function", "doc": "<p>dot(Vector3) -> float\ncalculates the dot- or scalar-product with the other vector</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.angle_to", "modulename": "seagulls.engine", "qualname": "Vector3.angle_to", "type": "function", "doc": "<p>angle_to(Vector3) -> float\ncalculates the angle to a given vector in degrees.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.update", "modulename": "seagulls.engine", "qualname": "Vector3.update", "type": "function", "doc": "<p>update() -> None\nupdate(int) -> None\nupdate(float) -> None\nupdate(Vector3) -> None\nupdate(x, y, z) -> None\nupdate((x, y, z)) -> None\nSets the coordinates of the vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.scale_to_length", "modulename": "seagulls.engine", "qualname": "Vector3.scale_to_length", "type": "function", "doc": "<p>scale_to_length(float) -> None\nscales the vector to a given length.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.reflect", "modulename": "seagulls.engine", "qualname": "Vector3.reflect", "type": "function", "doc": "<p>reflect(Vector3) -> Vector3\nreturns a vector reflected of a given normal.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.reflect_ip", "modulename": "seagulls.engine", "qualname": "Vector3.reflect_ip", "type": "function", "doc": "<p>reflect_ip(Vector3) -> None\nreflect the vector of a given normal in place.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.distance_to", "modulename": "seagulls.engine", "qualname": "Vector3.distance_to", "type": "function", "doc": "<p>distance_to(Vector3) -> float\ncalculates the Euclidean distance to a given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.distance_squared_to", "modulename": "seagulls.engine", "qualname": "Vector3.distance_squared_to", "type": "function", "doc": "<p>distance_squared_to(Vector3) -> float\ncalculates the squared Euclidean distance to a given vector.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.elementwise", "modulename": "seagulls.engine", "qualname": "Vector3.elementwise", "type": "function", "doc": "<p>elementwise() -> VectorElementwiseProxy\nThe next operation will be performed elementwise.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.as_spherical", "modulename": "seagulls.engine", "qualname": "Vector3.as_spherical", "type": "function", "doc": "<p>as_spherical() -> (r, theta, phi)\nreturns a tuple with radial distance, inclination and azimuthal angle.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.from_spherical", "modulename": "seagulls.engine", "qualname": "Vector3.from_spherical", "type": "function", "doc": "<p>from_spherical((r, theta, phi)) -> None\nSets x, y and z from a spherical coordinates 3-tuple.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.project", "modulename": "seagulls.engine", "qualname": "Vector3.project", "type": "function", "doc": "<p>project(Vector3) -> Vector3\nprojects a vector onto another.</p>\n", "parameters": ["unknown"], "funcdef": "def"}, {"fullname": "seagulls.engine.Vector3.epsilon", "modulename": "seagulls.engine", "qualname": "Vector3.epsilon", "type": "variable", "doc": "<p>small value used in comparisons</p>\n"}, {"fullname": "seagulls.engine.Vector3.x", "modulename": "seagulls.engine", "qualname": "Vector3.x", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Vector3.y", "modulename": "seagulls.engine", "qualname": "Vector3.y", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.engine.Vector3.z", "modulename": "seagulls.engine", "qualname": "Vector3.z", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.examples", "modulename": "seagulls.examples", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "seagulls.examples.MainMenuScene", "modulename": "seagulls.examples", "qualname": "MainMenuScene", "type": "class", "doc": "<p>This class is for X and Y.</p>\n"}, {"fullname": "seagulls.examples.MainMenuScene.__init__", "modulename": "seagulls.examples", "qualname": "MainMenuScene.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface_renderer", "asset_manager", "background", "game_controls", "game_state", "space_shooter_scene", "seagulls_scene", "rpg_scene"], "funcdef": "def"}, {"fullname": "seagulls.examples.MainMenuScene.start", "modulename": "seagulls.examples", "qualname": "MainMenuScene.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.MainMenuScene.should_quit", "modulename": "seagulls.examples", "qualname": "MainMenuScene.should_quit", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.MainMenuScene.tick", "modulename": "seagulls.examples", "qualname": "MainMenuScene.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.AsyncGameSession", "modulename": "seagulls.examples", "qualname": "AsyncGameSession", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.examples.AsyncGameSession.__init__", "modulename": "seagulls.examples", "qualname": "AsyncGameSession.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "scene_manager"], "funcdef": "def"}, {"fullname": "seagulls.examples.AsyncGameSession.start", "modulename": "seagulls.examples", "qualname": "AsyncGameSession.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.AsyncGameSession.wait_for_completion", "modulename": "seagulls.examples", "qualname": "AsyncGameSession.wait_for_completion", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.AsyncGameSession.stop", "modulename": "seagulls.examples", "qualname": "AsyncGameSession.stop", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.BlockingGameSession", "modulename": "seagulls.examples", "qualname": "BlockingGameSession", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.examples.BlockingGameSession.__init__", "modulename": "seagulls.examples", "qualname": "BlockingGameSession.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "scene_manager"], "funcdef": "def"}, {"fullname": "seagulls.examples.BlockingGameSession.start", "modulename": "seagulls.examples", "qualname": "BlockingGameSession.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.BlockingGameSession.wait_for_completion", "modulename": "seagulls.examples", "qualname": "BlockingGameSession.wait_for_completion", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.BlockingGameSession.stop", "modulename": "seagulls.examples", "qualname": "BlockingGameSession.stop", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.ExampleSceneManager", "modulename": "seagulls.examples", "qualname": "ExampleSceneManager", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "seagulls.examples.ExampleSceneManager.__init__", "modulename": "seagulls.examples", "qualname": "ExampleSceneManager.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "scene"], "funcdef": "def"}, {"fullname": "seagulls.examples.ExampleSceneManager.get_scene", "modulename": "seagulls.examples", "qualname": "ExampleSceneManager.get_scene", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleStarsBackground", "modulename": "seagulls.examples", "qualname": "SimpleStarsBackground", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.examples.SimpleStarsBackground.__init__", "modulename": "seagulls.examples", "qualname": "SimpleStarsBackground.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "asset_manager"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleStarsBackground.tick", "modulename": "seagulls.examples", "qualname": "SimpleStarsBackground.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleStarsBackground.render", "modulename": "seagulls.examples", "qualname": "SimpleStarsBackground.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleRpgBackground", "modulename": "seagulls.examples", "qualname": "SimpleRpgBackground", "type": "class", "doc": "<p>Interface for anything representing an object in the scene.</p>\n"}, {"fullname": "seagulls.examples.SimpleRpgBackground.__init__", "modulename": "seagulls.examples", "qualname": "SimpleRpgBackground.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "asset_manager"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleRpgBackground.tick", "modulename": "seagulls.examples", "qualname": "SimpleRpgBackground.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.SimpleRpgBackground.render", "modulename": "seagulls.examples", "qualname": "SimpleRpgBackground.render", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "surface"], "funcdef": "def"}, {"fullname": "seagulls.examples.WindowScene", "modulename": "seagulls.examples", "qualname": "WindowScene", "type": "class", "doc": "<p>This class is for X and Y.</p>\n"}, {"fullname": "seagulls.examples.WindowScene.__init__", "modulename": "seagulls.examples", "qualname": "WindowScene.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "active_scene", "game_state"], "funcdef": "def"}, {"fullname": "seagulls.examples.WindowScene.start", "modulename": "seagulls.examples", "qualname": "WindowScene.start", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.WindowScene.should_quit", "modulename": "seagulls.examples", "qualname": "WindowScene.should_quit", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.WindowScene.tick", "modulename": "seagulls.examples", "qualname": "WindowScene.tick", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "seagulls.examples.GameState", "modulename": "seagulls.examples", "qualname": "GameState", "type": "class", "doc": "<p></p>\n"}, {"fullname": "seagulls.examples.GameState.__init__", "modulename": "seagulls.examples", "qualname": "GameState.__init__", "type": "function", "doc": "<p></p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "seagulls.examples.GameState.active_scene", "modulename": "seagulls.examples", "qualname": "GameState.active_scene", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "seagulls.examples.GameState.game_state_changed", "modulename": "seagulls.examples", "qualname": "GameState.game_state_changed", "type": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();