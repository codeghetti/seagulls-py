{% extends "default/module.html.jinja2" %}
{% block title %}{{ module.modulename }} API Docs{% endblock %}
{% block style %}{% endblock %}
{% defaultmacro bases(cls) %}
    {%- if cls.bases -%}
        {%- for base in cls.bases -%}
            - {{ base[:2] | link(text=base[2]) }}
        {%- endfor -%}
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro default_value(var) -%}
    {%- if var.default_value_str -%}
        <span class="default_value">{{ var.default_value_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro annotation(var) %}
    {%- if var.annotation_str -%}
        <span class="annotation">{{ var.annotation_str | escape | linkify }}</span>
    {%- endif -%}
{% enddefaultmacro %}
{% defaultmacro decorators(doc) %}
    {% for d in doc.decorators if not d.startswith("@_") %}
        <div class="decorator">{{ d }}</div>
    {% endfor %}
{% enddefaultmacro %}
{% defaultmacro headerlink(doc) -%}
    <a class="headerlink" href="#{{ doc.qualname }}">#&nbsp;&nbsp</a>
{% enddefaultmacro %}
{% defaultmacro function(fn) -%}
    <div class="attr function">{{ headerlink(fn) }}
        {{ decorators(fn) }}
        {% if fn.name == "__init__" %}
            <span class="name">{{ ".".join(fn.qualname.split(".")[:-1]) }}</span>
            {#- no space -#}
            <span class="signature">{{ fn.signature_without_self | escape | linkify }}</span>
        {% else %}
            <span class="def">{{ fn.funcdef }}</span>
            <span class="name">{{ fn.name }}</span>
            {#- no space -#}
            <span class="signature">{{ fn.signature | escape | linkify }}</span>:
        {% endif %}
    </div>
{% enddefaultmacro %}
{% defaultmacro variable(var) %}
    <div class="attr variable">{{ headerlink(var) }}
        <span class="name">{{ var.name }}</span>{{ annotation(var) }}{{ default_value(var) }}
    </div>
{% enddefaultmacro %}
{% defaultmacro submodule(mod) %}
    <div class="attr module">{{ headerlink(mod) }}<span class="name">{{ mod.taken_from | link }}</span></div>
{% enddefaultmacro %}
{% defaultmacro class(cls) %}
    <div class="attr class">
        {{ headerlink(cls) }}
        {{ decorators(cls) }}
        <span class="def">class</span>
        <span class="name">{{ cls.qualname }}</span>
        {{- bases(cls) -}}:
    </div>
{% enddefaultmacro %}
{% defaultmacro member(doc) %}
    {% if doc.type == "class" %}
        {{ class(doc) }}
    {% elif doc.type == "function" %}
        {{ function(doc) }}
    {% elif doc.type == "module" %}
        {{ submodule(doc) }}
    {% else %}
        {{ variable(doc) }}
    {% endif %}
    {% if doc.type != "variable" %}
        {{ view_source(doc) }}
    {% endif %}
    {{ docstring(doc) }}
{% enddefaultmacro %}
{% defaultmacro docstring(var) %}
    {% if var.docstring %}
        {{ var.docstring | to_markdown | linkify(namespace=var.qualname) }}
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro nav_members(members) %}
    <ul class="memberlist">
        {% for m in members if is_public(m) | trim %}
            <li>
                {% if m.type == "class" %}
                    <a class="class" href="#{{ m.qualname }}">{{ m.qualname }}</a>
                    {% if m.own_members %}
                        {{ nav_members(m.own_members) | indent(12) }}
                    {% endif %}
                {% elif m.type == "module" %}
                    <a class="module" href="#{{ m.name }}">{{ m.name }}</a>
                {% elif m.name == "__init__" %}
                    <a class="function" href="#{{ m.qualname }}">{{ m.qualname.split(".")[-2] }}</a>
                {% else %}
                    <a class="{{ m.type }}" href="#{{ m.qualname }}">{{ m.name }}</a>
                {% endif %}
            </li>
        {% endfor %}
    </ul>
{% enddefaultmacro %}
{% defaultmacro is_public(doc) %}
    {#
    This macro is a bit unconventional in that its output is not rendered, but treated as a boolean:
    Returning no text is interpreted as false, returning any other text is iterpreted as true.
    Implementing this as a macro makes it very easy to override with a custom template..
    #}
    {% if not doc.name.startswith("_") %}
        {# members not starting with an underscore are considered public by default #}
        true
    {% elif doc.name == "__init__" %}
        {# the constructor is our special case which we also treat as public #}
        true
    {% elif doc.name == "__doc__" %}
        {# Sometimes we have __doc__ in __all__, which we want to exclude for pdoc's purposes. #}
        {# https://github.com/mitmproxy/pdoc/issues/235 #}
    {% elif doc.qualname is in(module.obj.__all__ or []) %}
        {# members starting with an underscore are still public if mentioned in __all__ #}
        true
    {% endif %}
{% enddefaultmacro %}
{# fmt: off #}
{% defaultmacro inherited(cls) %}
    {% for base, members in cls.inherited_members.items() %}
        {% set m = None %}{# workaround for https://github.com/pallets/jinja/issues/1427 #}
        {% set member_html %}
            {% for m in members if is_public(m) | trim %}
                <dd id="{{ m.qualname }}" class="{{ m.type }}">
                    {{- m.taken_from | link(text=m.name.replace("__init__",base[1])) -}}
                </dd>
            {% endfor %}
        {% endset %}
        {# we may not have any public members, in which case we don't want to print anything. #}
        {% if member_html %}
            <div><dt>{{ base | link }}</dt>
                {{ member_html }}
            </div>
        {% endif %}
    {% endfor %}
{% enddefaultmacro %}
{# fmt: on #}
{% defaultmacro view_source(doc) %}
    {% if show_source and doc.source %}
!!! note "View Source"
    ```python
        {% filter indent(width=8) %}
        {{ doc.source }}
        {% endfilter %}
    ```
    {% endif %}
{% enddefaultmacro %}
{% defaultmacro module_name() %}
    ##
        {%- set parts = module.modulename.split(".") -%}
        {%- for part in parts -%}
            {%- set fullname = ".".join(parts[:loop.index]) -%}
            {%- if fullname in all_modules and fullname != module.modulename -%}
                [{{ "../" * loop.revindex0 }}{{ part }}]({{ part }})
            {%- else -%}
                {{ part }}
            {%- endif -%}
            {%- if loop.nextitem -%}
                .
            {%- endif -%}
        {%- endfor -%}
{% enddefaultmacro %}
{% block head %}{% endblock %}
{% block body %}
    {% block nav %}{% endblock %}
        {% block module_info %}
            {{ module_name() }}
            {{ docstring(module) }}
            {{ view_source(module) }}
            {% block edit_button %}
                {% if edit_url %}
                    [{{ edit_url }}](Edit on GitHub)
                {% endif %}
            {% endblock %}
        {% endblock %}
        {% block module_contents %}
            {% for m in module.flattened_own_members if is_public(m) | trim %}
                <section id="{{ m.qualname or m.name }}">
                    {{ member(m) }}
                    {% if m.type == "class" %}
                        {% for m in m.own_members if m.type != "class" and is_public(m) | trim %}
                            <div id="{{ m.qualname }}" class="classattr">
                                {{ member(m) }}
                            </div>
                        {% endfor %}
                        {% set inherited_members = inherited(m) | trim %}
                        {% if inherited_members %}
                            <div class="inherited">
                                <h5>Inherited Members</h5>
                                <dl>
                                    {{ inherited_members }}
                                </dl>
                            </div>
                        {% endif %}
                    {% endif %}
                </section>
            {% endfor %}
        {% endblock %}
    </main>
    {% if mtime %}
        {% include "livereload.html.jinja2" %}
    {% endif %}
    {% block search_js %}
        {% if search and all_modules|length > 1 %}
            {% include "search.html.jinja2" %}
        {% endif %}
    {% endblock %}
{% endblock %}
